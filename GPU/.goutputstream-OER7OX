/*
Authors: Alexsander Melo and Ygor Canalli
Date: November of 2014
Topicos Especiais em Programacao de Computadores = TEPC
Universidade Federal Rural do Rio de Janeiro - UFRRJ
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <cuda_runtime.h>

typedef unsigned char boolean;
//typedef unsigned char bitvector_64;
//typedef unsigned short bitvector_64;
typedef unsigned long bitvector_64;

//#define BITVECTOR_64_MAX UCHAR_MAX
//#define BITVECTOR_64_MAX USHRT_MAX
#define BITVECTOR_64_MAX ULONG_MAX

#define WORD_SIZE ((int) sizeof(bitvector_64) * 8)
#define ASCII pow(2, sizeof(char) * 8) /*max length of ASCII*/
//#define UTF8 (unsigned int) pow(2, sizeof(char) * 8) /*max length of UTF8*/

#define MASK(z) (bitvector_64) 1 << (z - 1)

#define GPU 0

#define CHECK_ERROR(call) do {\
   if( cudaSuccess != call) {\
      fprintf(stderr,"CUDA ERROR:%s in file: %s in line: %d", cudaGetErrorString(call),  __FILE__, __LINE__);\
         exit(0);\
} } while (0)



void printOcurrences(bitvector_64* ocurrence_array, unsigned int n)
{

	unsigned int i = 0;

	unsigned int bits = sizeof(bitvector_64) * 8;
	unsigned int block = 0;
	unsigned int r = 0;

	unsigned int size_array = ceil(n / bits);

	boolean ocurred = 0;

	for (i = 0; i < n; i++)
	{
		block = (unsigned int) i / bits;
		r = i % bits

		ocurred = array[block] & MASK(r) != 0;

		if (ocurred)
			printf("\nOcurrence at position: %d of text", i);
	}
}


__device__ __host__ char* strBin(bitvector_64 n)
{
	//unsigned short int n_bits = 0;
	char* str;
	int i = 0;

	/*Suppose n_bits <= WORD_SIZE*/
	//n_bits = (n > 1) ? floor(log(n) / log(2) + 0.5) : (n == 1);
	str = (char*) malloc (WORD_SIZE * sizeof(char));

	bitvector_64 numerator = n;

	for(i = WORD_SIZE - 1; i >= 0; i--)
	{	
		str[i] = 48 + (numerator % 2);		
		numerator >>= 1;
	}

	return str;
}


__device__ __host__ void printInfo(bitvector_64 EQ, bitvector_64 VX, bitvector_64 HX, bitvector_64 HP, bitvector_64 HN, bitvector_64 VP, bitvector_64 VN, long score)
{
	printf("\nScore: %ld", score);
	printf("\nEQ: %s  ::  %lu", strBin(EQ), EQ);
	printf("\nVX: %s  ::  %lu", strBin(VX), VX);
	printf("\nHX: %s  ::  %lu", strBin(HX), HX);
	printf("\nHP: %s  ::  %lu", strBin(HP), HP);
	printf("\nVP: %s  ::  %lu", strBin(VP), VP);
	printf("\nVN: %s  ::  %lu", strBin(VN), VN);
	printf("\nHN: %s  ::  %lu\n", strBin(HN), HN);
}



__device__ __host__ boolean setBit(bitvector_64* array, const unsigned int p)
{
	unsigned int n = sizeof(bitvector_64) * 8;
	unsigned int block = (unsigned int) p/n;
	unsigned int r = p % n;;
	array[block] |= MASK(r);

	return 1;
}


__device__ __host__ void unsetBit(bitvector_64* array, const unsigned int p)
{
	unsigned int n = sizeof(bitvector_64) * 8;
	unsigned int block = (unsigned int) p/n;
	unsigned int r = p % n;
	array[block] &= ~(MASK(r));
}


__device__ long advancedBlock(bitvector_64* PEq,
	 						bitvector_64* MMASK,
	 						bitvector_64* HMASK,
							unsigned int character_offset,
							bitvector_64* VP,
							bitvector_64* VN,
							bitvector_64* VX,
							bitvector_64* HX,
							bitvector_64* HP,
							bitvector_64* HN,
							unsigned short int n_blocks,
							unsigned int alphabet_lenght)
{
	long score = 0;

	bitvector_64 add_carry = 0;
	bitvector_64 has_carry = 0;
	bitvector_64 shift_carry_HN = 0;
	bitvector_64 shift_carry_HP = 0;
	bitvector_64 EQ = 0;
	bitvector_64 X = 0;

	unsigned int i = 0;

	for(i = 0; i < n_blocks; i++)
	{

		EQ = PEq[(i * alphabet_lenght) + character_offset];

		VX[i] = EQ | VN[i];
		VX[i] &= MMASK[i];

		has_carry = add_carry;		
		X = EQ | has_carry;

		add_carry = ((X & VP[i]) > (MMASK[i] - VP[i]));
		HX[i] = (((X & VP[i]) + VP[i]) ^ VP[i]) | X | VN[i];
		HX[i] &= MMASK[i];
		
		HP[i] = VN[i] | ~(VP[i] | HX[i]);
		HP[i] &= MMASK[i];

		HN[i] = VP[i] & HX[i];
		HN[i] &= MMASK[i];

		score = ((HP[i] & HMASK[i] != 0) - ((HN[i] & HMASK[i]) != 0));
		
		//printf("\n(%d) character: %c", i, (char) character_offset);
		//printInfo(EQ, VX[i], HX[i], HP[i], HN[i], VP[i], VN[i], score);
		//getchar();
		
		has_carry = shift_carry_HP;
		shift_carry_HP = (HP[i] & HMASK[i]) != 0;

		HP[i] = (HP[i] << 1);
		HP[i] |= has_carry;
		HP[i] &= MMASK[i];

		has_carry = shift_carry_HN;
		shift_carry_HN = (HN[i] & HMASK[i]) != 0;

		HN[i] <<= 1;
		HN[i] |= has_carry;
		HN[i] &= MMASK[i];

		VP[i] = HN[i] | ~(HP[i] | VX[i]);
		VP[i] &= MMASK[i];

		VN[i] = HP[i] & VX[i];
		VN[i] &= MMASK[i];
	}

	return score;
}



void* preprocessingPEq(bitvector_64** PEq, char* p, const size_t m, const unsigned int alphabet_lenght, const unsigned short int n_blocks)
{
	unsigned int i = 0,
		         j = 0,
		         k = 0;

	for (i = 0; i < n_blocks; i++)
		for (j = 0; j < alphabet_lenght; j++)
			(*PEq)[i * alphabet_lenght + j] = 0;
	

	for (j = 0; j < m; j++) /*j is pattern id*/ /*p[j] is alphabet id, collumn*/
	{
		i = floor(j / WORD_SIZE); /*Block id, line*/
		k = j % WORD_SIZE;
		(*PEq)[i * alphabet_lenght + ((unsigned int) p[j])] |= MASK(k+1);
	}

	return 0;	
}




__global__ void myers_kernel(bitvector_64* PEq,
							 bitvector_64* MMASK,
							 bitvector_64* HMASK,
							 const size_t m,
							 const unsigned int k,
							 bitvector_64* ocurrence_array,
							 char* t,
							 const unsigned int n,
							 const unsigned short int n_blocks,
							 const unsigned int alphabet_lenght)
{
	
	unsigned int range = (offset + (2*k-1));
	unsigned int offset = (threadIdx * k) + (threadIdx > 1)*((threadIdx - 1) * (k-1));
	unsigned int length = n*((offset + range) > n) + )((offset+ (2*k-1)) <= n);
	unsigned int position = 0;

	long score = m;

	bitvector_64 *VP, /*vertical positive vector*/
		     	 *VN; /*vertical negative vector*/

	bitvector_64 *HP, /*horizontal positive vector*/
		     	 *HN, /*horizontal negative vector*/
		     	 *VX, /*vertical vector*/
		     	 *HX; /*vertical vector*/

	unsigned int i = 0,
				 j = 0;

	
	VP = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);
	VN = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);
	HP = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);
	HN = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);
	VX = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);
	HX = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);


	/*set initial values*/
	for (i = 0; i < n_blocks; i++)
	{
		VP[i] = MMASK[i];
		VN[i] = 0;
	}


	for(j = 0; j < length; j++)
	{
		score += advancedBlock(PEq, MMASK, HMASK, (unsigned int) t[j], VP, VN, VX, HX, HP, HN, n_blocks, alphabet_lenght);

		position = j + offset;
		(score  <= k) && setBit(ocurrence_array, position);
	}
}


bitvector_64* myers(char *t, unsigned long n, char *p, size_t m, unsigned int k, const unsigned int alphabet_lenght)
{
	
	unsigned short int n_blocks = ceil((float) m / WORD_SIZE); /*quantity of blocks*/
	unsigned int n_slices = ceil((float) n / k); /*quantity of text slices*/

	unsigned int i = 0;


	/*========================================================================================*/
	CHECK_ERROR(cudaSetDevice(GPU));
	CHECK_ERROR(cudaDeviceReset());
	/*========================================================================================*/



	/*========================================================================================*/
	bitvector_64* HMASK = NULL;
	bitvector_64* MMASK = NULL;
	bitvector_64* d_HMASK = NULL;
	bitvector_64* d_MMASK = NULL;


	HMASK = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);
	MMASK = (bitvector_64*) malloc (sizeof(bitvector_64) * n_blocks);

	bitvector_64 remaining_bits = m;

	for (i = 0; i < n_blocks; i++)
	{
		MMASK[i] = (remaining_bits > WORD_SIZE) ? BITVECTOR_64_MAX : pow(2, remaining_bits) - 1;
		HMASK[i] = (remaining_bits > WORD_SIZE) ? MASK(WORD_SIZE) : MASK(remaining_bits);
		remaining_bits = (remaining_bits > WORD_SIZE) ? remaining_bits - WORD_SIZE : 0;
	}

	CHECK_ERROR(cudaMalloc(&d_HMASK, n_blocks * sizeof(bitvector_64)));
	CHECK_ERROR(cudaMalloc(&d_MMASK, n_blocks * sizeof(bitvector_64)));


	/*Copy to device*/
	CHECK_ERROR(cudaMemcpy(d_MMASK, MMASK, n_blocks * sizeof(bitvector_64), cudaMemcpyHostToDevice));
	CHECK_ERROR(cudaMemcpy(d_HMASK, HMASK, n_blocks * sizeof(bitvector_64), cudaMemcpyHostToDevice));
	/*========================================================================================*/




	/*========================================================================================*/
	bitvector_64 *PEq;
	bitvector_64 *d_PEq;

	PEq = (bitvector_64*) malloc (sizeof(bitvector_64) * alphabet_lenght * n_blocks);
	preprocessingPEq(&PEq, p, m, alphabet_lenght, n_blocks);

	CHECK_ERROR(cudaMalloc(&d_PEq, alphabet_lenght * n_blocks * sizeof(bitvector_64)));

	/*Copy to device*/
	CHECK_ERROR(cudaMemcpy(d_PEq, PEq, n_blocks * alphabet_lenght * sizeof(bitvector_64), cudaMemcpyHostToDevice));	
	/*========================================================================================*/



	/*========================================================================================*/
	bitvector_64 *ocurrence_array;
	bitvector_64 *d_ocurrence_array;

	unsigned int size_ocurrence_array = ceil(n / (sizeof(bitvector_64) * 8));

	ocurrence_array = (bitvector_64*) malloc (sizeof(bitvector_64) * size_ocurrence_array);
	CHECK_ERROR(cudaMalloc((void**) &d_ocurrence_array, size_ocurrence_array * sizeof(bitvector_64)));
	/*========================================================================================*/



	/*========================================================================================*/
	char* d_t;
	CHECK_ERROR(cudaMalloc((void**) &d_t, n * sizeof(char)));
	
	/*Copy to device*/
	CHECK_ERROR(cudaMemcpy(d_t, t, n * sizeof(char), cudaMemcpyHostToDevice));
	/*========================================================================================*/



	/*========================================================================================*/
	dim3 threadsPerBlock(n_slices, 1);
  	dim3 numBlocks(1, 1);

  	/*call myers kernel CUDA*/
	myers_kernel<<<numBlocks, threadsPerBlock>>>(d_PEq, d_MMASK, d_HMASK, m, k, d_ocurrence_array, t, n, n_blocks, alphabet_lenght);
	CHECK_ERROR(cudaDeviceSynchronize());
	/*========================================================================================*/

	

	/*========================================================================================*/
	/*Copy device to host*/
	CHECK_ERROR(cudaMemcpy(t, d_t, n * sizeof(float), cudaMemcpyDeviceToHost));
	/*========================================================================================*/

	

	/*========================================================================================*/
	/*free GPU memory*/
	CHECK_ERROR(cudaFree(d_MMASK));
	CHECK_ERROR(cudaFree(d_HMASK));
	CHECK_ERROR(cudaFree(d_PEq));
	CHECK_ERROR(cudaFree(d_ocurrence_array));
	CHECK_ERROR(cudaFree(d_t));

	/*free CPU memory*/
	free(HMASK);
	free(MMASK);
	free(PEq);
	/*========================================================================================*/


	return ocurrence_array;
}



int main(int argc, char** argv)
{

	char *t, /*text*/
	     *p; /*pattern*/

	bitvector_64* ocurrence_array;


	unsigned int alphabet_lenght = ASCII;

	size_t m = 0;  /*length of pattern*/
	unsigned long n = 0; /*length of text*/

	unsigned int k = 0;
	
	short int c;
	
	while ((c = getopt (argc, argv, "s:t:a:k:")) != -1)
	{
		switch(c)
		{
			case 's':
				p = optarg;
				m = strlen(p);
				break;
			case 't':
				t = optarg;
				n = strlen(t);
				break;
			case 'a':
				alphabet_lenght = atoi(optarg);
				break;
			case 'k':
				k = atoi(optarg);
				break;
			case '?':
				if ((optopt == 's') || (optopt == 't') || (optopt == 'a'))
		       			fprintf(stderr, "Option -%c requires an argument.\n", optopt);
				else
		       			fprintf(stderr, "Unknown option `-%c'.\n", optopt);
				return 1;
		}
	}


	/*Aproximate string matching*/
	if(k < m)
		k = m;

	ocurrence_array = myers(t, n, p, m, k, alphabet_lenght);
	printOcurrences(ocurrence_array, n);

	free(ocurrence_array);

	return 0;
}
